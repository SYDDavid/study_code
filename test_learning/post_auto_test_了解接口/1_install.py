'''
    1、接口基础
    2、http协议 - requests库
    3、接口文档 - 用例设计

接口基础
    接口（api）：传输数据的通道
    接口类型：
        http:GET或者POST方法处理数据
        webservice：通过soap协议获取数据
    查看接口信息
        1、浏览器F12 - XHR过滤器 — 数据发生交互的接口
        2、工具：fiddler，wireshark、charles、postman、jmeter
        3、接口文档
网络传输协议
    HTTP                                                端口号为：80
    HTTPS：在HHTP下加入了SSL层，在传输层对信息进行加密         端口号为：443

HTML：超文本标记语言，将网络上的文档格式统一，使用标签应用各种资源
Images：
CSS：HTML语言的样式描述，（当前理解为编写起来更轻量友好）
JS：动态效果，常嵌入在HTML中展示

HTTP通信分为两个部分：
    客户端请求信息、服务器响应信息

HTTP通信过程
    1、建立连接
    2、发送请求数据
    3、接收响应数据
    4、断开连接

请求数据包：
请求行：协议+请求类型+版本号+路径
消息头
空行
消息体

响应数据包
状态行 状态码     -1：指示信息：信息已接收，正在处理  2：成功    3：重定向：等待进一步请求   4：客户端错误   5：服务端错误
消息头
空行
消息体

cookie session token关系

    cookies：而Web应用程序是使用HTTP协议传输数据的。HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。
    这就意味着服务器无法从连接上跟踪会话。即用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。
    要跟踪该会话，必须引入一种机制。
    由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。
    这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理。

    session：Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。
    客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。
    如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。
    Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。

    token：不涉及数据库保存，且存在时效性

接口文档-请求头？？？

请求类型：
    请求体在网络中的格式
'''